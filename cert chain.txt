The description of a video : "Generating SSL certificate chain in Linux" done by Kevin Faulkner
This is a video guide on how to generate a root CA, intermediate CA and certificate signed by those, under Linux.
https://www.lazytree.us/doku.php?id=b...
^ Blog entry about the video, or the direct content below
https://www.lazytree.us/doku.php?id=p...
I plan on restructuring the blog so please don't rely on the direct link

https://github.com/ansible/ansible/issues/34284

https://docs.microsoft.com/en-us/windows/win32/winrm/authentication-for-remote-connections

0

I create a cert mapping entry with this command:

winrm create winrm/config/service/certmapping?Issuer=‎87d604dae22d91ee90f10a7dd91c33fc3093fd9b+Subject=PC01URI=* @{UserName="Administrator";Password="test123"}
But how can I delete this entry?

winrm delete winrm/config/service/certmapping?Issuer=‎87d604dae22d91ee90f10a7dd91c33fc3093fd9b+Subject=PC01+URI=*


https://medium.com/@suraj0208/updating-acls-of-the-private-key-of-the-certificate-in-windows-certificate-store-2f83bbad827e

https://www.codyhosterman.com/2019/06/assigning-read-access-to-windows-private-key/

to avoid the CN check error (that is caused by self cert)

we can add the cert to the trusted root cert authorities list on the remote server



https://github.com/MicrosoftDocs/windows-itpro-docs/blob/public/windows/security/identity-protection/smart-cards/smart-card-and-remote-desktop-services.md
https://github.com/MicrosoftDocs/windows-itpro-docs/blob/public/windows/security/identity-protection/smart-cards/smart-card-and-remote-desktop-services.md
https://stackoverflow.com/questions/32968290/mapping-network-drive-with-smartcard-non-domain
https://stackoverflow.com/questions/58133548/how-can-i-login-to-the-windows-10-remotely-by-smart-card-with-c

https://superuser.com/questions/1611572/how-can-i-create-a-virtual-smart-card-on-my-tpm-without-joining-my-windows-com
https://community.openvpn.net/openvpn/ticket/1296

===== Task: =====
Generate a certificate chain with a private Certificate Authority.

===== Condition: =====
Given one Linux machine with root access (for trust), with openssl, potentially apache/nginx

===== Standard: =====
Have the certificate be trusted by the machine.

==== Steps: ====
1. Generate Root key
2. Generate Root certificate
3. Generate Intermediate Certificate Authority key
4. Create Intermediate Certificate Signing Request (CSR)
5. Generate Intermediate Certificate signed by Root CA
6. Add certificates to Operating system's trust (Debian/deb-ish)
7. Generate RSA server key
8. Create server certificate signing request, to be signed by intermediate
9. Sign CSR, by intermediate CA
10. Verify everything
11. Webserver
12. verify again!

==== commands ====
openssl genrsa -out RootCA.key 4096
openssl req -new -x509 -days 1826 -key RootCA.key -out RootCA.crt

echo 'Root Certificate done, now intermediate begins'
openssl genrsa -out IntermediateCA.key 4096
openssl req -new -key IntermediateCA.key -out IntermediateCA.csr
openssl x509 -req -days 1000 -in IntermediateCA.csr -CA RootCA.crt -CAkey RootCA.key -CAcreateserial  -out IntermediateCA.crt

echo 'intermediate done, now on to importing cert into the OS trust'
cp *.crt /usr/local/share/ca-certificates/
update-ca-certificates

echo 'now for the server specific material'
openssl genrsa -out server.key 2048
OPENSSL_CONF=~/openssl.conf openssl req -new -key server.key -out server.csr
openssl x509 -req -in server.csr -CA IntermediateCA.crt -CAkey IntermediateCA.key -set_serial 01 -out server.crt -days 500 -sha1

echo 'verification of sort here'
openssl x509 -in server.crt -noout -text |grep 'host.localism'


#optional, not going over.
#echo 'for the sake of windows clients, we created a pkcs file, but lets create usable PEMs'
#openssl pkcs12 -export -out IntermediateCA.pkcs -inkey ia.key -in IntermediateCA.crt -chain -CAfile ca.crt
#openssl pkcs12 -in path.p12 -out newfile.crt.pem -clcerts -nokeys
#openssl pkcs12 -in path.p12 -out newfile.key.pem -nocerts -nodes

openssl s_client -connect 192.168.0.17:443

contents OPENSSL.conf
[req]
prompt = no
default_md = sha1 #for video use only, sha256 onwards
req_extensions = req_ext
distinguished_name = dn

[ dn ]
C=US
ST=North Carolina
O=LazyTree
localityName=Redacted
OU=HomeLab
emailAddress=kondor6c@lazytree.us
CN=www.lazytree.us
